package com.accenture.lkm.streamcreation;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.IntStream;
import java.util.stream.Stream;



public class Basics {

	public static void main(String[] args) {
		
		
		List<String> names = Arrays.asList("Alice", "Bob", "Charlie");
		Stream<String> nameStream = names.stream();

		// Process the stream
		nameStream.filter(name -> name.startsWith("A"))
		          .forEach(System.out::println);  // Outputs: Alice
		
		
		
		
		
		String[] colors = {"Red", "Green", "Blue"};
		Stream<String> colorStream = Arrays.stream(colors);

		// Count elements
		long count = colorStream.count();  // Returns: 3
		System.out.println(count);
		
		
		
		
		
		// of()->Returns a sequential ordered stream whose elements are the specified values.

		Stream<Integer> numbers = Stream.of(1, 2, 3, 4, 5);

		// Sum the numbers
		int val = numbers.reduce(0, Integer::sum);  // Returns: 15
		System.out.println(val);
		
		
		
		
		
		//Returns an infinite sequential unordered stream where each element is generated by the provided Supplier. 
		//This is suitable for generating constant streams, streams of random elements, etc.

		// Generate 5 random numbers
		Stream<Double> randomNumbers = Stream.generate(Math::random).limit(5);
		//randomNumbers.forEach(System.out::println);
		//randomNumbers.forEach(response->System.out.println(response));
		
		
		
		
		
		// Generate first 10 even numbers
		Stream<Integer> evenNumbers = Stream.iterate(0, n -> n + 2).limit(20);
		evenNumbers.forEach(System.out::println);  // Outputs: 0, 2, 4, 6, 8, 10, 12, 14, 16, 18

		
		
		
		Stream<String> emptyStream = Stream.empty();
		System.out.println("emptyStream=:===>>>>"+emptyStream);
		
		
		
		//Returns a sequential ordered IntStream from startInclusive(inclusive) to endExclusive (exclusive) 
		//by an incremental step of 1.
		IntStream intStream = IntStream.range(1, 6);  // 1, 2, 3, 4, 5
		intStream.forEach(System.out::println);
		
		
		
		// Read lines from a file as a stream. //Read all lines from a file as a Stream
		try (Stream<String> lines = Files.lines(Paths.get("file.txt"))) {
		    lines.forEach(System.out::println);
		} catch (IOException e) {
		    e.printStackTrace();
		}


	}
}






